{"version":3,"sources":["firebase.js","Pages/SignIn/SignIn.js","Pages/SignUp/SignUp.js","Pages/Main/Main.js","Pages/About/About.js","Components/NavigationBar/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","enablePersistence","provider","GoogleAuthProvider","signInWithGoogle","signInWithPopup","SignIn","state","email","password","error","typed","signInWithEmailAndPasswordHandler","event","preventDefault","signInWithEmailAndPassword","catch","errorCode","code","errorMessage","message","console","log","setState","displayName","onChangeHandler","currentTarget","name","value","setTimeout","typeWriter","slicedStr","length","this","concat","slice","Container","style","backgroundColor","Jumbotron","marginBottom","textAlign","className","fontWeight","maxWidth","margin","Form","Group","controlId","Label","Control","type","placeholder","onChange","Button","variant","block","onClick","paddingBottom","to","Component","SignUp","createUserWithEmailAndPasswordHandler","props","updateDisplayNameFromForm","createUserWithEmailAndPassword","then","currentUser","updateProfile","Main","About","NavigationBar","user","onAuthStateChanged","userAuth","Navbar","collapseOnSelect","expand","bg","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","marginRight","signOut","App","displayNameFromForm","basename","process","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d616899.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCLuloPcn-et2C4WJqj6uf03HGcpcYF3m8\",\r\n  authDomain: \"studyparty-97e3d.firebaseapp.com\",\r\n  databaseURL: \"https://studyparty-97e3d.firebaseio.com\",\r\n  projectId: \"studyparty-97e3d\",\r\n  storageBucket: \"studyparty-97e3d.appspot.com\",\r\n  messagingSenderId: \"320626247759\",\r\n  appId: \"1:320626247759:web:136b65025be5f241aa823a\",\r\n  measurementId: \"G-F3RVYS6305\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n// firebase.analytics();\r\n\r\n\r\n// get references to Cloud Firestore and Authentication service, and export them\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\nfirebase.firestore().enablePersistence();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport const signInWithGoogle = () => {\r\n  auth.signInWithPopup(provider);\r\n};\r\n\r\nexport const generateUserDocument = async (user, additionalData) => {\r\n  if (!user) return;\r\n\r\n  const userRef = firestore.doc(`users/${user.uid}`);\r\n  const snapshot = await userRef.get();\r\n\r\n  if (!snapshot.exists) {\r\n    const { email, displayName } = user;\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        ...additionalData\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error creating user document\", error);\r\n    }\r\n  }\r\n  return getUserDocument(user.uid);\r\n};\r\n\r\nconst getUserDocument = async uid => {\r\n  if (!uid) return null;\r\n  try {\r\n    const userDocument = await firestore.doc(`users/${uid}`).get();\r\n    return {\r\n      uid,\r\n      ...userDocument.data()\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error fetching user\", error);\r\n  }\r\n};","import React, { Component } from 'react';\r\nimport { Container, Jumbotron, Form, Button } from 'react-bootstrap';\r\nimport './SignIn.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { signInWithGoogle } from '../../firebase';\r\nimport firebase from \"firebase/app\";\r\n\r\nclass SignIn extends Component {\r\n\r\n  state = {\r\n    email: \"\",\r\n    password: \"\",\r\n    error: null,\r\n    typed: \"\",\r\n  }\r\n\r\n  // when component mounts, will run typewriter effect on subtitle after 1.5s\r\n  componentDidMount() {\r\n    const subtitleStr = 'Hey! You want to umm... study???'\r\n    setTimeout(() => this.typeWriter(subtitleStr), 1500)\r\n  }\r\n\r\n  signInWithEmailAndPasswordHandler = (event, email, password) => {\r\n    event.preventDefault()\r\n\r\n    firebase.auth()\r\n      .signInWithEmailAndPassword(email, password)\r\n      .catch(function (error) {\r\n        var errorCode = error.code;\r\n        var errorMessage = error.message;\r\n        console.log(errorCode)\r\n        console.log(errorMessage)\r\n      });\r\n\r\n    this.setState({\r\n      email: \"\",\r\n      password: \"\",\r\n      displayName: \"\"\r\n    })\r\n\r\n  }\r\n\r\n  //function to handle form change\r\n  onChangeHandler = (event) => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    if (name === 'userEmail') {\r\n      this.setState({\r\n        email: value\r\n      })\r\n    } else if (name === 'userPassword') {\r\n      this.setState({\r\n        password: value\r\n      })\r\n    }\r\n  }\r\n\r\n  // function that will take add a letter from a given string to 'typed' string stored in state every 50 milliseconds\r\n  typeWriter(slicedStr) {\r\n    if (slicedStr.length !== 0) {\r\n      this.setState((state) => ({\r\n        typed: state.typed.concat(slicedStr[0])\r\n      }));\r\n      setTimeout(() => this.typeWriter(slicedStr.slice(1)), 50);\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n\r\n        <Container style={{ backgroundColor: 'white' }}>\r\n\r\n          <Jumbotron style={{ backgroundColor: 'white', marginBottom: '0px', textAlign: \"center\" }}>\r\n            <h1 className=\"main-title permanent-marker pink animate__animated animate__bounceInDown\">StudyParty!</h1>\r\n            <h6 className=\"montserrat\">\r\n              {this.state.typed}\r\n              <span className=\"cursor\">\r\n                <span style={{ fontWeight: \"normal\" }}>|</span>\r\n              </span>\r\n            </h6>\r\n          </Jumbotron>\r\n\r\n          <div style={{ maxWidth: \"600px\", margin: \"0 auto\" }}>\r\n            <Form>\r\n\r\n              <Form.Group controlId=\"userEmail\">\r\n                <Form.Label>Email address</Form.Label>\r\n                <Form.Control type=\"email\" placeholder=\"Enter email\" name=\"userEmail\" value={this.state.email} onChange={(event) => this.onChangeHandler(event)} />\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\" placeholder=\"Password\" name=\"userPassword\" value={this.state.password} onChange={(event) => this.onChangeHandler(event)} />\r\n              </Form.Group>\r\n\r\n              <Button\r\n                variant=\"primary\"\r\n                type=\"submit\"\r\n                block\r\n                onClick={event => {\r\n                  this.signInWithEmailAndPasswordHandler(event, this.state.email, this.state.password);\r\n                }}\r\n              >\r\n                Sign In\r\n              </Button>\r\n\r\n              <div style={{ margin: '40px 0px' }}>\r\n                <p className=\"ride-line\"><span className=\"ride-line-span\">or</span></p>\r\n                <Button variant=\"outline-primary\" block onClick={signInWithGoogle}>\r\n                  Sign in with Google\r\n                </Button>\r\n              </div>\r\n\r\n            </Form>\r\n\r\n            <p style={{ paddingBottom: '100px' }}>\r\n              Don't have an account? Sign up <Link to='signUp'>here</Link>\r\n            </p>\r\n\r\n          </div>\r\n\r\n        </Container>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SignIn;","import React, { Component } from 'react';\r\nimport { Container, Jumbotron, Button, Form } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { signInWithGoogle } from '../../firebase';\r\nimport firebase from \"firebase/app\";\r\n\r\nclass SignUp extends Component {\r\n  state = {\r\n    email: \"\",\r\n    password: \"\",\r\n    displayName: \"\",\r\n    error: null,\r\n    typed: \"\",\r\n  }\r\n\r\n  // when component mounts, will run typewriter effect on subtitle after 1.5s\r\n  componentDidMount() {\r\n    const subtitleStr = 'Hey! You want to umm... study???'\r\n    setTimeout(() => this.typeWriter(subtitleStr), 1500)\r\n  }\r\n\r\n  createUserWithEmailAndPasswordHandler = (event, email, password, displayName) => {\r\n    console.log(email);\r\n    console.log(password);\r\n    console.log(displayName);\r\n\r\n    event.preventDefault();\r\n\r\n    // adds displayName immediately to state on Application.js to display on navigation bar\r\n    this.props.updateDisplayNameFromForm(this.state.displayName)\r\n\r\n    firebase.auth()\r\n      // .createUserWithEmailAndPassword(email, password)\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then(function () {\r\n        console.log('Successfully created new user');\r\n        var user = firebase.auth().currentUser;\r\n        user.updateProfile({\r\n          displayName: displayName\r\n        })\r\n          .then(function () {\r\n            console.log(`Successfully updated profile with displayName`)\r\n          })\r\n          .catch(function (error) {\r\n            console.log(`Error updating user with displayName:`, error)\r\n          });\r\n      })\r\n      .catch(function (error) {\r\n        console.log('Error creating new user:', error)\r\n      });\r\n\r\n    this.setState({\r\n      email: \"\",\r\n      password: \"\",\r\n      displayName: \"\"\r\n    })\r\n\r\n  };\r\n\r\n  //function to handle form change\r\n  onChangeHandler = (event) => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    if (name === 'userEmail') {\r\n      this.setState({\r\n        email: value\r\n      })\r\n    } else if (name === 'userPassword') {\r\n      this.setState({\r\n        password: value\r\n      })\r\n    } else if (name === 'displayName') {\r\n      this.setState({\r\n        displayName: value\r\n      })\r\n    }\r\n  }\r\n\r\n  // function that will take add a letter from a given string to 'typed' string stored in state every 50 milliseconds\r\n  typeWriter(slicedStr) {\r\n    if (slicedStr.length !== 0) {\r\n      this.setState((state) => ({\r\n        typed: state.typed.concat(slicedStr[0])\r\n      }));\r\n      setTimeout(() => this.typeWriter(slicedStr.slice(1)), 50);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container style={{ backgroundColor: 'white' }}>\r\n\r\n          <Jumbotron style={{ backgroundColor: 'white', marginBottom: '0px', textAlign: \"center\" }}>\r\n            <h1 className=\"main-title permanent-marker pink animate__animated animate__bounceInDown\">StudyParty!</h1>\r\n            <h6 className=\"montserrat\">\r\n              {this.state.typed}\r\n              <span className=\"cursor\">\r\n                <span style={{ fontWeight: \"normal\" }}>|</span>\r\n              </span>\r\n            </h6>\r\n          </Jumbotron>\r\n          <div style={{ maxWidth: \"600px\", margin: \"0 auto\" }}>\r\n            <Form>\r\n              <Form.Group controlId=\"userName\">\r\n                <Form.Label>Display name</Form.Label>\r\n                <Form.Control type=\"name\" placeholder=\"Enter name\" name=\"displayName\" value={this.state.displayName} onChange={(event) => this.onChangeHandler(event)} />\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"userEmail\">\r\n                <Form.Label>Email address</Form.Label>\r\n                <Form.Control type=\"email\" placeholder=\"Enter email\" name=\"userEmail\" value={this.state.email} onChange={(event) => this.onChangeHandler(event)} />\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\" placeholder=\"Password\" name=\"userPassword\" value={this.state.password} onChange={(event) => this.onChangeHandler(event)} />\r\n              </Form.Group>\r\n              <Button\r\n                variant=\"primary\"\r\n                type=\"submit\"\r\n                block\r\n                onClick={event => {\r\n                  this.createUserWithEmailAndPasswordHandler(event, this.state.email, this.state.password, this.state.displayName);\r\n                }}\r\n              >\r\n                Sign Up\r\n            </Button>\r\n              <div style={{ margin: '40px 0px' }}>\r\n                <p className=\"ride-line\"><span className=\"ride-line-span\">or</span></p>\r\n                <Button onClick={signInWithGoogle} variant=\"outline-primary\" block >\r\n                  Sign up with Google\r\n            </Button>\r\n              </div>\r\n            </Form>\r\n            <p style={{ paddingBottom: '100px' }}>\r\n              Already have an account? Sign in <Link to='/'>here</Link>\r\n            </p>\r\n          </div>\r\n        </Container>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SignUp;","import React, { Component } from 'react';\r\nimport { Container, Jumbotron } from 'react-bootstrap';\r\n\r\nclass Main extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <Jumbotron>\r\n            <h1>Main page</h1>\r\n          </Jumbotron>\r\n        </Container>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Main;","import React, { Component } from 'react';\r\nimport { Container, Jumbotron } from 'react-bootstrap';\r\n\r\nclass About extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <Jumbotron>\r\n            <h1>About us</h1>\r\n          </Jumbotron>\r\n        </Container>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default About;","import React, { Component } from \"react\";\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { auth } from '../../firebase';\r\n\r\nclass NavigationBar extends Component {\r\n\r\n  state = {\r\n    user: null,\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n    console.log(this.props.displayName);\r\n\r\n    auth.onAuthStateChanged(userAuth => {\r\n      console.log(userAuth)\r\n      this.setState({\r\n        user: userAuth,\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props)\r\n    console.log(this.state)\r\n    return (\r\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" >\r\n        <Navbar.Brand href=\"/\" className=\"permanent-marker\">StudyParty!</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"/about\">About</Nav.Link>\r\n            <Nav.Link href=\"/about\">Contact Us</Nav.Link>\r\n            {/* <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\r\n            <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\r\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n            </NavDropdown> */}\r\n          </Nav>\r\n          <Nav>\r\n            {this.state.user ?\r\n              <>\r\n                <Nav.Link style={{ marginRight: \"20px\" }}>{`Welcome, ${this.state.user.displayName ? this.state.user.displayName : this.props.displayName}`}</Nav.Link>\r\n                <Nav.Link style={{ marginRight: \"20px\" }} onClick={() => { auth.signOut() }}>Logout</Nav.Link>\r\n              </>\r\n              : null}\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NavigationBar","// import React and Router\nimport React, { Component } from 'react';\nimport { BrowserRouter as Route, Switch, Redirect, BrowserRouter } from \"react-router-dom\";\n\n// import components\nimport SignIn from './Pages/SignIn/SignIn'\nimport SignUp from './Pages/SignUp/SignUp'\nimport Main from './Pages/Main/Main'\nimport About from './Pages/About/About'\nimport NavigationBar from './Components/NavigationBar/NavigationBar'\n\n// import firebase auth\nimport { auth } from './firebase';\n\n// import styles\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\nclass App extends Component {\n  \n  state = {\n    user: null,\n    displayNameFromForm: null,\n  }\n\n  componentDidMount() {\n    auth.onAuthStateChanged(userAuth => {\n      console.log(userAuth)\n      this.setState({ user: userAuth },\n        console.log(this.state))\n    })\n  }\n\n  updateDisplayNameFromForm = (displayName) => {\n    console.log(displayName)\n    this.setState({\n      displayNameFromForm: displayName,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"Application\">\n\n        <NavigationBar displayName={this.state.displayNameFromForm} />\n\n        <BrowserRouter basename={`${process.env.PUBLIC_URL}/`}>\n          <Switch>\n\n            <Route exact path=\"/\">\n              {this.state.user ? <Redirect to=\"/main\" /> : <SignIn />}\n            </Route>\n\n            <Route exact path=\"/signUp\"\n              render={props => (\n                this.state.user ? <Redirect to=\"/main\" /> : <SignUp updateDisplayNameFromForm={this.updateDisplayNameFromForm} />\n              )}\n            />\n\n            <Route exact path=\"/main\">\n              {!this.state.user ? <Redirect to=\"/\" /> : <Main />}\n            </Route>\n\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n\n          </Switch>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}