{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport { useContext } from \"react\";\nimport { UserContext } from './Providers/UserProvider';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCLuloPcn-et2C4WJqj6uf03HGcpcYF3m8\",\n  authDomain: \"studyparty-97e3d.firebaseapp.com\",\n  databaseURL: \"https://studyparty-97e3d.firebaseio.com\",\n  projectId: \"studyparty-97e3d\",\n  storageBucket: \"studyparty-97e3d.appspot.com\",\n  messagingSenderId: \"320626247759\",\n  appId: \"1:320626247759:web:136b65025be5f241aa823a\",\n  measurementId: \"G-F3RVYS6305\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig); // firebase.analytics();\n// get references to Cloud Firestore and Authentication service, and export them\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // const user = useContext(UserContext);\n\nconst userRef = firestore.doc(`users/${user.uid}`);\nconst snapshot = userRef.get();\nconst provider = new firebase.auth.GoogleAuthProvider();\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(provider);\n};\nexport const generateUserDocument = async (user, additionalData) => {\n  if (!user) return;\n  const userRef = firestore.doc(`users/${user.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      email,\n      displayName\n    } = user;\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        ...additionalData\n      });\n    } catch (error) {\n      console.error(\"Error creating user document\", error);\n    }\n  }\n\n  return getUserDocument(user.uid);\n};\n\nconst getUserDocument = async uid => {\n  if (!uid) return null;\n\n  try {\n    const userDocument = await firestore.doc(`users/${uid}`).get();\n    return {\n      uid,\n      ...userDocument.data()\n    };\n  } catch (error) {\n    console.error(\"Error fetching user\", error);\n  }\n};","map":{"version":3,"sources":["C:/Users/Allen Cooper/Documents/Coding/StudyParty/src/firebase.js"],"names":["firebase","useContext","UserContext","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","userRef","doc","user","uid","snapshot","get","provider","GoogleAuthProvider","signInWithGoogle","signInWithPopup","generateUserDocument","additionalData","exists","email","displayName","set","error","console","getUserDocument","userDocument","data"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,0BAA5B;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,kCAFS;AAGrBC,EAAAA,WAAW,EAAE,yCAHQ;AAIrBC,EAAAA,SAAS,EAAE,kBAJU;AAKrBC,EAAAA,aAAa,EAAE,8BALM;AAMrBC,EAAAA,iBAAiB,EAAE,cANE;AAOrBC,EAAAA,KAAK,EAAE,2CAPc;AAQrBC,EAAAA,aAAa,EAAE;AARM,CAAvB,C,CAWA;;AACAX,QAAQ,CAACY,aAAT,CAAuBT,cAAvB,E,CACA;AAEA;;AACA,OAAO,MAAMU,IAAI,GAAGb,QAAQ,CAACa,IAAT,EAAb;AACP,OAAO,MAAMC,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB,C,CACP;;AAEA,MAAMC,OAAO,GAAGD,SAAS,CAACE,GAAV,CAAe,SAAQC,IAAI,CAACC,GAAI,EAAhC,CAAhB;AACA,MAAMC,QAAQ,GAAGJ,OAAO,CAACK,GAAR,EAAjB;AAEA,MAAMC,QAAQ,GAAG,IAAIrB,QAAQ,CAACa,IAAT,CAAcS,kBAAlB,EAAjB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AACpCV,EAAAA,IAAI,CAACW,eAAL,CAAqBH,QAArB;AACD,CAFM;AAIP,OAAO,MAAMI,oBAAoB,GAAG,OAAOR,IAAP,EAAaS,cAAb,KAAgC;AAClE,MAAI,CAACT,IAAL,EAAW;AACX,QAAMF,OAAO,GAAGD,SAAS,CAACE,GAAV,CAAe,SAAQC,IAAI,CAACC,GAAI,EAAhC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AACA,MAAI,CAACD,QAAQ,CAACQ,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAyBZ,IAA/B;;AACA,QAAI;AACF,YAAMF,OAAO,CAACe,GAAR,CAAY;AAChBD,QAAAA,WADgB;AAEhBD,QAAAA,KAFgB;AAGhB,WAAGF;AAHa,OAAZ,CAAN;AAKD,KAND,CAME,OAAOK,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;AACD;AACF;;AACD,SAAOE,eAAe,CAAChB,IAAI,CAACC,GAAN,CAAtB;AACD,CAjBM;;AAmBP,MAAMe,eAAe,GAAG,MAAMf,GAAN,IAAa;AACnC,MAAI,CAACA,GAAL,EAAU,OAAO,IAAP;;AACV,MAAI;AACF,UAAMgB,YAAY,GAAG,MAAMpB,SAAS,CAACE,GAAV,CAAe,SAAQE,GAAI,EAA3B,EAA8BE,GAA9B,EAA3B;AACA,WAAO;AACLF,MAAAA,GADK;AAEL,SAAGgB,YAAY,CAACC,IAAb;AAFE,KAAP;AAID,GAND,CAME,OAAOJ,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACD;AACF,CAXD","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport { useContext } from \"react\";\r\nimport { UserContext } from './Providers/UserProvider'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCLuloPcn-et2C4WJqj6uf03HGcpcYF3m8\",\r\n  authDomain: \"studyparty-97e3d.firebaseapp.com\",\r\n  databaseURL: \"https://studyparty-97e3d.firebaseio.com\",\r\n  projectId: \"studyparty-97e3d\",\r\n  storageBucket: \"studyparty-97e3d.appspot.com\",\r\n  messagingSenderId: \"320626247759\",\r\n  appId: \"1:320626247759:web:136b65025be5f241aa823a\",\r\n  measurementId: \"G-F3RVYS6305\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n// firebase.analytics();\r\n\r\n// get references to Cloud Firestore and Authentication service, and export them\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n// const user = useContext(UserContext);\r\n\r\nconst userRef = firestore.doc(`users/${user.uid}`);\r\nconst snapshot = userRef.get();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport const signInWithGoogle = () => {\r\n  auth.signInWithPopup(provider);\r\n};\r\n\r\nexport const generateUserDocument = async (user, additionalData) => {\r\n  if (!user) return;\r\n  const userRef = firestore.doc(`users/${user.uid}`);\r\n  const snapshot = await userRef.get();\r\n  if (!snapshot.exists) {\r\n    const { email, displayName } = user;\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        ...additionalData\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error creating user document\", error);\r\n    }\r\n  }\r\n  return getUserDocument(user.uid);\r\n};\r\n\r\nconst getUserDocument = async uid => {\r\n  if (!uid) return null;\r\n  try {\r\n    const userDocument = await firestore.doc(`users/${uid}`).get();\r\n    return {\r\n      uid,\r\n      ...userDocument.data()\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error fetching user\", error);\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}